package data.view;

/**
 * the necessary imports for the dynamic DataPanel.
 */
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.*;

import data.controller.DatabaseAppController;
import data.controller.DatabaseController;

/**
 * The Dynamic Data Panel, which can use different inputs to manipulate the
 * database.
 * 
 * @author ssla9721
 *
 */
public class DynamicDataPanel extends JPanel
{
	private DatabaseController baseController;
	private JButton queryButton;
	private SpringLayout baseLayout;
	private String table;
	private ArrayList<JTextField> fieldList;

	/**
	 * The constructor for the dynamic data panel. setting up the basics for the
	 * layout, and starting the methods to set it up.
	 * 
	 * @param baseController
	 * @param table
	 */
	public DynamicDataPanel(DatabaseController baseController, String table)
	{
		this.baseController = baseController;
		this.table = table;
		queryButton = new JButton("Submit query");
		baseLayout = new SpringLayout();
		fieldList = new ArrayList<>();

		setupPanel(table);
		setupLayout();
		setupListeners();
	}

	/**
	 * the setup panel method setus up the panel and create
	 * 
	 * @param selectedTable
	 */
	private void setupPanel(String selectedTable)
	{
		this.setLayout(baseLayout);
		this.add(queryButton);
		int spacing = 50;

		String[] columns = baseController.getDatabaseColumnNames(selectedTable);

		for (int spot = 0; spot < columns.length; spot++)
		{
			if (!columns[spot].equalsIgnoreCase("id"))
			{
				JLabel columnLabel = new JLabel(columns[spot]);
				JTextField columnField = new JTextField(20);

				this.add(columnLabel);
				this.add(columnField);
				columnField.setName(columns[spot]);
				fieldList.add(columnField);

				baseLayout.putConstraint(SpringLayout.WEST, queryButton, 25, SpringLayout.WEST, this);
				baseLayout.putConstraint(SpringLayout.WEST, queryButton, 30, SpringLayout.SOUTH, this);

				baseLayout.putConstraint(SpringLayout.NORTH, columnLabel, spacing, SpringLayout.NORTH, this);
				baseLayout.putConstraint(SpringLayout.SOUTH, columnLabel, spacing, SpringLayout.NORTH, this);
			}
		}
	}

	/**
	 * The dumping place for the code generated by the window builder, the
	 * baselayout.putConstraint methods.
	 */
	private void setupLayout()
	{
		baseLayout.putConstraint(SpringLayout.WEST, queryButton, 161, SpringLayout.WEST, this);
		baseLayout.putConstraint(SpringLayout.SOUTH, queryButton, -10, SpringLayout.SOUTH, this);
	}

	/**
	 * This can get the value for the fields string.
	 * 
	 * @return
	 */
	private String getFields()
	{
		String fields = "(";

		for (int spot = 0; spot < fieldList.size(); spot++)
		{
			fields += "`" + fieldList.get(spot).getName() + "`";
			if (spot == fieldList.size() - 1)
			{
				fields += ")";
			}
			else
			{
				fields += ", ";
			}
		}

		return fields;
	}

	/**
	 * this gets the values for the values string.
	 * 
	 * @return
	 */
	private String getValues()
	{
		String values = "(";

		for (int spot = 0; spot < fieldList.size(); spot++)
		{
			values += "'" + fieldList.get(spot).getText() + "'";
			if (spot == fieldList.size() - 1)
			{
				values += ");";
			}
			else
			{
				values += ", ";
			}
		}

		return values;
	}

	/**
	 * The setup listeners method to allow for clicks and other inputs to create
	 * action in the dynamic data panel.
	 */
	private void setupListeners()
	{
		final String query = "INSERT INTO " + "`" + table + "`" + getFields() + " Values " + getValues();

		queryButton.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent click)
			{
				baseController.submitUpdateQuery(query);
			}
		});
	}
}
